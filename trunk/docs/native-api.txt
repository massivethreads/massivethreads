* About:
native API is a collection of functions with a prefix "myth_". With native API, you can use full functionalities of MassiveThreads such as work stealing strategy customization.

* Tutorial:

** How to compile and link with native API:

Please include myth.h in ${prefix}/include and link libmyth.so or libmyth-native.so in ${prefix}/lib.
${prefix} shows a directory where MassiveThreads is installed. Please change accordingly.

Example:

$ cat foo.c
#include <myth.h>
int main(int argc,char **argv)
{
  myth_init();
  printf("Hello, MassiveThreads!\n");
  myth_fini();
  return 0;
}

$ gcc -o foo foo.c -I${prefix}/include -L${prefix}/lib -lmyth 

** Initialization and cleanup

Before calling main function, the MassiveThreads library is automatically initialized with a default configuration, thus explicit initialization is not essentially needed. By calling initialization function explicitly, several paramteres can be controlled from application.

myth_init initializes the library with a default configuration, and myth_init_withparam takes the number of worker threads and the default stack size.

The order of priority is the following: 
1.myth_init_withparam arguments
2.environmental variables
3.built-in values

Similarly, explicit cleanup is not needed because the MassiveThreads library is automaticaly cleaned up after main function is finished. But programmers can do it explicitly by calling a function myth_fini.

Examples:

/*
 * The simplest example
 * Explicit initialization/cleanup are not needed
 */
int main(int argc, chart **argv)
{
  /* Do something here */
  return 0;
}

/* Explicit initialization with specifying the number of workers and stack size manually */
int main(int argc, chart **argv)
{
  int n_workers;
  size_t stack_size;
  n_workers=atoi(argv[1]);
  stack_size=(size_t)atoi(argv[2]);
  myth_init_withparam(n_workers,stack_size);
  /* Do something here */
  myth_fini();
  return 0;
}

** Thread creation and termination

myth_create and myth_create_ex are functions to create a new thread.
myth_create creates a new thread and calls an entry point function. On success it returns a handle of new thread, otherwise NULL is returned.

myth_create_ex takes an extra argument of structure myth_thread_option which describes the configuration of a thread to be created. By filling the structure, the following parameters can be configured.
* stack_size         : Stack size in bytes
* swtich_immediately : Execution strategy (0: help-first, others:work-first) 
* custom_data_size   : The size of the hint data (described later)
* custom_data        : Initial data of the hint

myth_join is a function to wait for the termination of a thread. It takes two arguments: a handle to thread and a pointer to store the return value of the entry point function. If return value is not needed, NULL can be specified as second argument.

myth_detach is a function to release the resource of the thread after it is finished.   

These semantics are similar to those of pthread. Specifically, myth_detach or myth_join must be called ONCE for every thread.

Example:

/* Create threads recursively */
void *threadfn(void* arg)
{
	myth_thread_t th[2];
	int i;
	int depth=(int)arg;
	if (depth<=0) return NULL;
	for (i=0;i<2;i++){
		th[i]=myth_create(threadfn,(void*)(depth-1));
	}
	for (i=0;i<2;i++){
		myth_join(th[i],NULL);
	}
	return NULL;
}

