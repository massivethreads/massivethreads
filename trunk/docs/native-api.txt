* About:
native API is a collection of functions with a prefix "myth_". With native API, you can use full functionalities of MassiveThreads such as work stealing strategy customization.

* Tutorial:

** How to compile and link with native API:

Please include myth.h in ${prefix}/include and link libmyth.so or libmyth-native.so in ${prefix}/lib.
${prefix} shows a directory where MassiveThreads is installed. Please change accordingly.

Example:

$ cat foo.c
#include <myth.h>
int main(int argc,char **argv)
{
  myth_init();
  printf("Hello, MassiveThreads!\n");
  myth_fini();
  return 0;
}

$ gcc -o foo foo.c -I${prefix}/include -L${prefix}/lib -lmyth 

** Initialization and cleanup

Before calling main function, the MassiveThreads library is automatically initialized with a default configuration, thus explicit initialization is not essentially needed. By calling initialization function explicitly, several paramteres can be controlled from application.

myth_init initializes the library with a default configuration, and myth_init_withparam takes the number of worker threads and the default stack size.

The order of priority is the following: 
1.myth_init_withparam arguments
2.environmental variables
3.built-in values

Similarly, explicit cleanup is not needed because the MassiveThreads library is automaticaly cleaned up after main function is finished. But programmers can do it explicitly by calling a function myth_fini.

Examples:

/*
 * The simplest example
 * Explicit initialization/cleanup are not needed
 */
int main(int argc, chart **argv)
{
  /* Do something here */
  return 0;
}

/* Explicit initialization with specifying the number of workers and stack size manually */
int main(int argc, chart **argv)
{
  int n_workers;
  size_t stack_size;
  n_workers=atoi(argv[1]);
  stack_size=(size_t)atoi(argv[2]);
  myth_init_withparam(n_workers,stack_size);
  /* Do something here */
  myth_fini();
  return 0;
}

